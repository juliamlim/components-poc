!function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){r(2),e.exports=r(1)},function(e,t,r){e.exports=r.p+"css/contemporary.css"},function(e,t,r){"use strict";r.r(t);class n extends HTMLElement{constructor(e){super(),this.init(this.parseAttributes);const t=document.createRange().createContextualFragment(this.render());this.attachShadow({mode:"open"}).appendChild(t.cloneNode(!0)),this.element=this.shadowRoot.querySelector("style").nextElementSibling}attributeChangedCallback(e,t,r){this.state[e]=r,this.updated(e,t,r)}init(){}updated(){}get window(){return window}get parseAttributes(){return Object.keys(this.attributes).reduce((e,t)=>{const{name:r,value:n}=this.attributes.item(t);return e[this.toCamel(r)]=n,e},{})}setListener(e,t,r,n=(()=>{})){console.log(e,t,r,n),r?(e.removeEventListener(t,n),e.addEventListener(t,r)):e.addEventListener(t,n)}toCamel(e=""){return e.replace(/-([a-z])/g,function(e){return e[1].toUpperCase()})}}customElements.define("product-tile",class extends n{static get observedAttributes(){return["name","price","add-to-cart"]}init(e){this.state=this.parseState(e)}render(){return`\n      <style>\n        @import url('/css/contemporary.css');\n      </style>\n      <article class="product-tile">\n        <div class="product-img"><img src="img/product.svg"/></div>\n        <header class="product-name"><h5>${this.state.name}</h5></header>\n        <p>\n          <span class="product-price ${this.state.salePrice?"sale":""}">${this.state.price}</span>\n          ${this.state.salePrice?`<span class="product-price-sale">${this.state.salePrice}</span>`:""}\n        </p>\n        ${this.state.colors?`<ul>\n              ${this.state.color.map(e=>{e.name,e.hex}).join("")}\n            </ul>`:""}\n        \x3c!-- Need to define children in the constructor so we can create an event listener for below --\x3e\n        <slot name="buttons">\n          <button class="product-atc">Add to Basket</button>\n        </slot>\n      </article>\n    `}connectedCallback(){this.addToCart=this.addToCart.bind(this),console.log("created")}attributeChangedCallback(e,t,r){switch(e=this.toCamel(e),this.state[e]=this.parseState({[e]:r})[e],e){case"name":this.element.querySelector(".product-name").textContent=this.state.name;break;case"price":this.element.querySelector(".product-price").textContent=this.state.price;break;case"addToCart":this.setListener(this.element.querySelector(".product-atc"),"click",t||this.addToCart.bind(this),r)}}parseState(e){return{...e,name:(e.name||"Coal").toUpperCase(),price:e.price?`$${e.price}`:"FREE",salePrice:e.salePrice?`$${e.salePrice}`:""}}addToCart(e){alert(`${this.state.name} was added to your cart`)}})}]);